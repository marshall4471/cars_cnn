# -*- coding: utf-8 -*-
"""cars_cnn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ugrzYyWFIDOEwLHG6EkmDWBG0QPBXD2Y
"""

from google.colab import drive

drive.mount('/content/drive/')

import tensorflow as tf
import matplotlib.pyplot as plt

from keras.layers import Conv2D, Activation, GlobalAvgPool2D, MaxPooling2D, Dense, Flatten, Dropout

from keras.models import Sequential

file1='/content/drive/MyDrive/archive (1)/Train'

file2= '/content/drive/MyDrive/archive (1)/Test'

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.05,
                                   zoom_range = 0.05,
                                   horizontal_flip = True)

train_set = train_datagen.flow_from_directory(file1,
                                                 target_size = (384, 384),
                                                 class_mode='categorical',
                                                 batch_size = 3)

test_datagen = ImageDataGenerator(rescale = 1./255)

test_set = test_datagen.flow_from_directory(file2,
                                            target_size = (384, 384),
                                            class_mode='categorical',
                                            batch_size =3)

cnn = tf.keras.models.Sequential()
cnn.add(tf.keras.layers.Dense(3, activation='relu', input_shape=[384,384,3]))
cnn.add(tf.keras.layers.Dropout(.20))
cnn.add(tf.keras.layers.MaxPooling2D(pool_size=[2,2], strides=2, padding='valid'))
cnn.add(tf.keras.layers.Conv2D(64, kernel_size=[2,2], padding='valid', activation='relu'))
cnn.add(tf.keras.layers.MaxPooling2D(pool_size=[2,2], strides=2, padding='valid'))
cnn.add(tf.keras.layers.Conv2D(64, kernel_size=[2,2],padding='valid', activation='relu' ))
cnn.add(tf.keras.layers.MaxPooling2D(pool_size=[2,2], strides=2, padding='valid'))
cnn.add(tf.keras.layers.Dropout(.20))
cnn.add(tf.keras.layers.Conv2D(64, kernel_size=[2,2],padding='valid', activation='relu' ))
cnn.add(tf.keras.layers.MaxPooling2D(pool_size=[2,2], strides=2, padding='valid'))
cnn.add(tf.keras.layers.Flatten())
cnn.add(tf.keras.layers.Dense(3, activation='sigmoid'))
cnn.compile(optimizer = 'adam', loss='categorical_crossentropy', metrics=['accuracy'])

cnn.summary()

history = cnn.fit(train_set, validation_data =test_set, epochs=20, verbose=2)

import cv2

import matplotlib.pyplot as plt

import numpy as np


x = plt.imread('/content/mercedes.jpg')
plt.imshow(x)

x = x/255

x = np.resize(x,(1,384,384,3))

x.shape

classes = list(train_set.class_indices)

print(classes[np.argmax(cnn.predict(x))])

y = plt.imread('/content/audi.jpg')
plt.imshow(y)

y = y/255

y = np.resize(y,(1,384,384,3))

y.shape

classes = list(train_set.class_indices)

print(classes[np.argmax(cnn.predict(y))])

z = plt.imread('/content/lamborgini.jpg')
plt.imshow(z)

z = z/255

z = np.resize(z,(1,384,384,3))

z.shape

classes = list(train_set.class_indices)

print(classes[np.argmax(cnn.predict(z))])